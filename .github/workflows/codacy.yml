
name: Codacy Security Scan


on:
  push:
  pull_request:

name: goblintAnalysisTests

on:
  push:
  pull_request:

jobs:
  generate-Sarif:
    env:
      # ./analysisTarget/main.c needs to be replaced with ./analysisTarget/PATH_TO_MAIN
      #the prefix  ./analysisTarget/ is removed in Goblint, so the location shows correctly in Github
      MAIN_NAME: '05-inf_loop.c'
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ocaml-compiler:
          - 4.12.0 # matches opam lock file
          # don't add any other because they won't be used

    runs-on: ${{ matrix.os }}
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Checkout Goblint repository
        uses: actions/checkout@v2
        with:
          repository: AlexanderEichler/analyzer
          #this path needs to be changed to the main branch
          ref: integrationSarif
          path: analyzer
      - name: Set up OCaml ${{ matrix.ocaml-compiler }}
        env:
          # otherwise setup-ocaml pins non-locked dependencies
          # https://github.com/ocaml/setup-ocaml/issues/166
          OPAMLOCKED: locked
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          path: analyzer
      # - name: Install conf-mpfr
      #    run : |
      #     opam install conf-pkg-config
      #     opam install conf-mpfr
      #     eval $(opam env)
      #   working-directory: analyzer
      - name: Install dependencies
        run: |
          pwd
          ls
          opam install . --deps-only --locked
        working-directory: analyzer
      - name: Build
        run: ./make.sh nat
        working-directory: analyzer
      - name: Generate the Sarif output
        run: |
          pwd
          ls
          ./goblint --sarif -o GitHubSarif.sarif  ${{env.MAIN_NAME}} -R ./testCRepo/
      - name: Upload the generated Sarif File
        uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: GitHubSarif.sarif

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v2

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@1.0.0
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif